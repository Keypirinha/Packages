#
# FilesCatalog Package configuration file
# More info at http://keypirinha.com
#

[main]
# Plugin's main configuration section.

# A soft-limit to ensure the Catalog of this plugin does not get too big
# * If this limit is reached during the scanning process, scanning will stop and
#   the plugin will output a warning message to the console. The created items
#   so far will be kept in the catalog.
# * Allowed range: [5_000; 300_000]
# * The thousands separator "_" is optional (convenience)
# * Default: 100_000
#catalog_limit = 100_000

# Print the settings of every *activated* profile to the console
# * It can be useful to ensure your profiles are configured properly
# * This setting has no functional impact on plugin's behavior
# * Default: no
#debug = no

[browsing]
# These values affect only the in-launcher directory browsing behaviour for this
# plugin's suggested items. The catalog will not be affected by this section.

# Show directories first while browsing
# Default: yes
#show_dirs_first = yes

# Show hidden files while browsing
# Default: no
#show_hidden_files = no

# Show system files while browsing
# * Note that system files/directories may be hidden. In other words, some
#   files/dirs setting may still not be visible unless you set show_hidden_files
#   to "yes" as well.
# * Default: no
#show_system_files = no


[profile/ExeOnly]
# A helper base profile to inherit from in order to catalog executable files
# only.
# * The PATHEXT environment variable is assumed to be valid and not empty,
#   otherwise no file will be inserted in the Catalog
# * See the "DocumentedDefaults" profile below for a description of the settings
include_hidden = no
include_dirs = no
include_files = yes
filters = + ext: ${env:PATHEXT}


[profile/DocumentedDefaults]
# This section is here for the sake of documenting the [profile/*] sections.
# IT IS RECOMMENDED NOT TO USE IT NOR TO INHERIT FROM IT.

# Allow the content of this profile to be inserted in the Catalog
# * IMPORTANT: the *paths* of a disabled profile will not be inserted into the
#   Catalog
# * A disabled profile can still be inherited
# * Default: no
activate = no

# The path(s) and/or pattern(s) to scan
# * Can be a multi-line value if several directories/patterns must be scanned
# * This value cannot be empty if this profile is *activated*
# * This value is tightly coupled with the *max_depth* setting below
# * Format:
#   * Only absolute paths/patterns are accepted
# * Examples:
#   * Scan recursively the "Documents" directories of the current user (see the
#     Configuration chapter of Keypirinha's documentation for an exhaustive list
#     of supported "KNOWNFOLDER" values):
#       paths =
#           ${var:KNOWNFOLDER_PUBLICDOCUMENTS}\**
#           ${var:KNOWNFOLDER_DOCUMENTS}\**
#           ${var:KNOWNFOLDER_SKYDRIVEDOCUMENTS}\**
#   * Catalog the *.txt files located directly under "C:\MyDir":
#       paths = C:\MyDir\*.txt
#   * WRONG EXAMPLE: catalog the *.txt and *.doc files located directly under
#     "C:\MyDir":
#       paths =
#           C:\MyDir\*.txt
#           C:\MyDir\*.doc
#     While this works, it is inefficient and requires the plugin to scan
#     C:\MyDir twice. The solution is to use the *filters* setting described
#     below. That way, C:\MyDir is scanned only once and files are filtered
#     on-the-fly:
#       paths = C:\MyDir
#       filters = ext: .txt .doc
paths =

# Which profile to inherit from?
# * Optional but useful if you want to have common settings for several profiles
#   and make your config file less bulky
# * Only the name of the profile to inherit from must be specified
# * IMPORTANT: the following profile settings are never inherited:
#   activate, inherit
# * Example:
#     inherit = ExeOnly
#     # Note: "profile/" prefix is omitted
# * Default: empty. No inheritance
inherit =

# Should hidden filesystem entries be scanned and included?
# * Enabling this filter will prevent the content of hidden directories from
#   being scanned. Even if some files in it are not hidden.
#   For a more fine-grained filtering instead, enable this option and use the
#   *filters* setting.
# * IMPORTANT: setting this to "no" can have a significant positive impact on
#   performance because the whole content of hidden directories will be skipped
#   during the scanning process.
# * If disabled (i.e. "no"), this setting takes precedence over the *filters*
#   setting so that the *filters* setting will not have a chance to be applied
#   in case the item is a hidden file/directory.
# * Default: no
include_hidden = no

# Should directory items themselves be included?
# * Disabling this option does not prevent files under a directory to be
#   catalogued. It only prevents the directory itself to be catalogued.
# * If "no", this setting takes precedence over the *filters* setting so that
#   the *filters* setting will not have a chance to be applied in case the item
#   is a directory
# * Default: no
include_dirs = no

# Should non-directory items be included?
# * If "no", this setting takes precedence over the *filters* setting so that
#   the *filters* setting will not have a chance to be applied in case the item
#   is not a directory
# * Default: yes
include_files = yes

# Control the maximum scan depth (recursivity) for each path/pattern specified
# in *paths*.
# * IMPORTANT:
#   * This value is tightly coupled with the *paths* setting above
#   * This value is only useful with patterns that use the "**" magic
#     sequence. Otherwise, no recursivity is applied during the scan (i.e. only
#     the content of the specified directory is scanned)
# * An integer in range [-1; ...) where:
#   * -1 (minus one) means the scan will go as deep as the filesystem hierarchy
#     requires for a given pattern in the *paths* setting
#   * 0 (zero) means only the direct content of the specified directory will be
#     scanned. The plugin will not scan the content of its sub-directories.
#   * A positive integer specify a strict limit as to the depth-level. 1 (one)
#     means "one level below the specified directory" so that only the content
#     of the first-level sub-directories will be scanned
# * Limiting the scan depth may have a great positive impact on performance
#   depending on the *paths* you specify in this profile, as well as the content
#   of your filesystem and your hardware. Which means Keypirinha will be much
#   faster at cataloging your items.
# * If this value is equal to 0 (zero), the "**" magic sequence will be
#   equivalent to "*" in the *paths* setting.
max_depth = -1

# Include/Exclude specific files/directories by matching their path, name,
# extension and/or attributes.
# * This can be a multi-line setting, with one filter per line
# * Processing (IMPORTANT):
#   * The default filtering behavior of an item that did not match any *filters*
#     is as follows:
#     * If *filters* is empty (default), item is INCLUDED
#     * If *filters* contains ONLY NEGATIVE filters and an item DOES NOT MATCH
#       any of them, item is INCLUDED
#     * Otherwise, the default behavior is to EXCLUDE the item
#   * During the scan process, this setting is applied AFTER the "include_*"
#     settings.
#     Use the *python_callback* setting to override this behavior.
#   * Order matters, filters are applied from the first one declared to the last
#     one
#   * If an item matches a filter, the filtering process is stopped and the item
#     will be included into the catalog, or excluded from it, depending on
#     filter's *sign*.
#
# * Format: [sign] [properties] <expression>
#
#   * [sign] is optional and can be "+" or "-" (without quotes)
#     * "+" (default if not specified) indicates an inclusive filter
#     * "-" indicates that a matching item must be excluded
#
#   * [properties] indicates the nature of the <expression> that follows.
#     It must be either empty or a colon-separated list of keywords
#     (example: "regex:nodrive:case:"):
#
#     * Empty [properties]:
#       <expression> is assumed to be either:
#       * a literal end-of-path that will be matched against the tail of the
#         path of each item.
#       * a shell-like pattern (if it contains at least one wilcard character
#         like '*', '?', ... that will match the FULL PATH of each item
#       CAUTION: in both cases, <expression> must be of relative form (i.e. not
#       absolute).
#       * Examples:
#         * filters = *.txt
#             Includes every *.txt file.
#             Note that in this very case (i.e. file extension matching), it is
#             more efficient to use the "ext:" property described below.
#         * filters = name.txt
#             Includes every file strictly named "name.txt".
#             Note that this strictly matches the of the file only, so a file
#             named "any_name.txt" does not match.
#         * filters = - *name.txt
#             Excludes every file with a path that ends with "name.txt".
#         * filters = - *foo*
#             Excludes every file with a path that contains "foo", either in
#             file name or in one of its parent directories.
#         * filters = - *n??e.txt
#             Excludes "name.txt" and "none.txt" for example.
#         * filters = - *\bar\*
#             Excludes every file/directory located directly under a directory
#             strictly named "bar"
#         * filters = foo\bar.doc
#             Includes every "bar.doc" file located directly under a "foo"
#             directory
#
#     * "ext:" (without quotes):
#       <expression> must be a semicolon-separated or space-separated list of
#       file extensions to match. This is especially convenient to use with the
#       ${env:PATHEXT} value to match executable files.
#       * Examples:
#         * filters = + ext: ${env:PATHEXT}
#             Includes every executable file.
#             This assumes your PATHEXT environment variable is not empty.
#         * filters = ext: .txt
#             Includes every *.txt file
#         * filters = - ext: .txt .pdf .jpg
#             Excludes every *.txt, *.pdf and *.jpg file
#         * filters = - ext: .txt;.pdf;.jpg
#             Same as above, but with semicolons as separators
#
#     * "regex:" (without quotes):
#       * <expression> must be a valid Python regular expression to match the
#         FULL PATH of the file/directory (or the drive-less path if combined
#         with "nodrive:")
#       * It can be combined with "case:" and/or "nodrive:"
#
#     * "nodrive:" (without quotes):
#       * This property specifies that you want to match the drive-less version
#         of the path of each item
#       * For example if the path of an item is "C:\dir\file.txt", the specified
#         <expression> will be matched against "\dir\file.txt" (notice the '\'
#         prefix)
#       * This property can be used on its own (see the "empty" case above) or
#         combined with "case:", and/or "regex:"
#
#     * "nodrive:" (without quotes):
#       * This property specifies that you want to match the path of each item
#         in a case-sensitive fashion (default being insensitive)
#       * It can be used on its own (see the "empty" case above) or combined
#         with "nodrive:", and/or "regex:"
#
#     * "attr:" or "attr_all:" (without quotes):
#       * <expression> must be a space-separated list of file attribute names to
#         match.
#       * "attr:" will match the given attributes with an OR operator.
#         The file must match AT LEAST ONE of them
#       * "attr_all:" matches the given attributes with an AND operator.
#         The file must match AT LEAST ALL of them, but can have more.
#       * Each attribute in <expression> can be prefixed by an exclamation mark
#         to specify a logical NOT
#       * List of supported attributes (without quotes):
#         * "directory" or "dir"
#             Identifies a directory
#         * "hidden"
#           * The file or directory is hidden
#           * IMPORTANT: this is NOT equivalent to the *include_hidden* setting.
#             Disabling *include_hidden* allows to ignore entire parts of the
#             filesystem if they are below a hidden directory, whereas using
#             this attribute filter will just allow to skip a given item to be
#             cataloged.
#         * "symlink" or "reparse_point":
#             A file or directory that has an associated reparse point, or a
#             file that is a symbolic link
#         * "compressed" or "comp"
#             A file or directory that is compressed
#         * "archive" or "arch" or "arc"
#             A file or directory that is an archive file or directory
#         * "encrypted"
#             A file or directory that is encrypted
#         * "readonly" or "ro"
#             A file that is read-only
#         * "system" or "sys"
#             A file or directory that the operating system uses a part of, or
#             uses exclusively
#       * Examples:
#         * filters = attr: dir
#             Include directories only
#         * filters = attr_all: dir !hidden
#             Include non-hidden directories only
# * Examples:
#   * filters = *\foo\*.doc
#       Would match:
#         c:\dir\foo\test.doc
#         c:\dir\FOO\TEST.doc
#         c:\dir\foo\.doc
#       Would NOT match:
#         c:\dir\barfoo\test.doc
#   * filters = case: \foo\*.doc
#       Would match:
#         c:\dir\foo\test.doc
#         c:\other_dir\foo\.doc
#       Would NOT match:
#         c:\dir\FOO\TEST.doc
#         c:\dir\barfoo\test.doc
#   * filters = regex:case: .+\\.+\.DOC
#       Would match:
#         c:\any_dir\any_name.DOC
#       Would NOT match:
#         c:\any_dir\any_name.doc
#         c:\any_dir\.doc
#   * filters = attr: !dir readonly
#   * filters =
#         *\foo\*.doc
#         + attr: dir readonly
# * Default: no filtering, which means all the files/directories that comply to
#   the "include_*" settings will be inserted into the catalog by default
filters =

# Template to name the catalogued items
# * Default: {clean_name}
# * Useful example:
#     file_item_label = {profile}: {clean_name}
# * Placeholders:
#   * {package}
#     * The name of the package (i.e. "FilesCatalog")
#   * {profile}
#     * The name of the profile as you declared it (e.g. "DocumentedDefaults")
#   * {name}
#     * The name part of the path of the file/directory
#     * Example: "C:\foo\bar.tar.gz" -> "bar.tar.gz"
#   * {clean_name}
#     * Same as {name} but after the trim_extensions option has been applied
#   * {title}
#     * Same as {file_name} but without all the extensions
#     * Examples:
#         "C:\foo\bar.txt" -> "bar"
#         "C:\foo\bar.tar.gz" -> "bar"
#         "C:\foo\.git" -> ".git"
#   * {titlex}
#     * Same as {file_name} but without the last extension
#     * Examples:
#         "C:\foo\bar.txt" -> "bar"
#         "C:\foo\bar.tar.gz" -> "bar.tar"
#         "C:\foo\.git" -> ".git"
#   * {ext}
#     * The last extension (may be empty!)
#     * Normally used in addition to a more meaningful placeholder
#     * Examples:
#         "C:\foo\bar.tar.gz" -> ".gz"
#         "C:\foo\.git" -> ""
#   * {exts}
#     * All the extensions (may be empty!)
#     * Normally used in addition to a more meaningful placeholder
#     * Examples:
#         "C:\foo\bar.tar.gz" -> ".tar.gz"
#         "C:\foo\.git" -> ""
#   * {drive}
#     * The drive part of item's path
#     * Example: "C:\foo\bar\baz\file.txt" -> "C:\"
#   * {dir}
#     * The path to the parent directory
#     * Example: "C:\foo\bar\baz\file.txt" -> "C:\foo\bar\baz"
#   * {dir1}
#     * The name of the parent directory
#     * Example: "C:\foo\bar\baz\file.txt" -> "baz"
#   * {dir2}
#     * The name of the parent directory of {dir1}
#     * Example: "C:\foo\bar\baz\file.txt" -> "bar"
#   * {dir3}
#     * The name of the parent directory of {dir2}
#     * Example: "C:\foo\bar\baz\file.txt" -> "foo"
#   * {2dirs}
#     * The names of the 2 immediate parent directories
#     * Example: "C:\foo\bar\baz\file.txt" -> "bar\baz"
#   * {3dirs}
#     * The names of the 3 immediate parent directories
#     * Example: "C:\foo\bar\baz\file.txt" -> "foo\bar\baz"
file_item_label = {clean_name}

# Same as *file_item_label* but for the description of the item to catalog
# * If empty, Keypirinha will display the full path of the file/directory
# * This value is only for displaying purpose. Item's description is not taken
#   into account at search time.
# * Default: empty
file_item_desc =

# Same as *file_item_label* and *file_item_desc* but specifically for directory
# items
# Default: same as file_item_label and
dir_item_label = ${file_item_label}
dir_item_desc = ${file_item_desc}

# Trim the following extensions from the {clean_name} tag
# * This is used only to build the value of the {clean_name} tag (see the
#   file_item_label, file_item_desc, dir_item_label and dir_item_desc settings)
# * Value is expected to be a semicolon-separated and/or space-separated list of
#   prefixes
# * Examples:
#     trim_extensions = .lnk;${env:PATHEXT}
#     trim_extensions = .txt .doc
# * Default: .lnk
trim_extensions = .lnk

# Open the item with a custom command line
# * Use this if you want to run a specific program when the item is opened.
# * The value should be a valid executable, and can include parameteres; any
#   occurrences of {} will be replaced with the item path.
# * Examples:
#     open_with = notepad.exe {}
#     open_with = wt.exe -d {}
# * Default: empty. The system default will be used
open_with =

# Custom item Python callback
# * For very advanced users only
# * This setting allows maximum flexibility by offering a way to implement your
#   own callback function in Python that will be called for each item found in
#   the filesystem according to the specified *paths* setting
# * It is ideal in order to have a more fine-grained filtering and to create the
#   catalog item yourself by specifying your own label and description for it
#   for example
# * The value must be the name of the function to call
# * A function with that name must be implemented in the
#   filescatalog_user_callbacks.py module, which can receive as many callback
#   functions as desired (i.e. for other profiles for example)
# * See the original filescatalog_user_callbacks.py file in the package for more
#   technical info
python_callback =


[var]
# As in every Keypirinha's configuration file, you may optionally include a
# [var] section to declare variables that you want to reuse anywhere else in
# this file.
#
# Note that the [var] section is inherited, which means that any value defined
# in the main configuration file (i.e. this file) will be propagated to
# subsequently loaded configuration files (packages' configuration files).
#
# REMINDER: For convenience, Keypirinha silently populates this section with
# predefined values that may come handy. Here are some of them: APP_DRIVE,
# APP_DIR, APP_EXE, APP_ARCH, PROFILE_DIR, PROFILE_DIR_INSTALLED_PACKS,
# PROFILE_DIR_LIVE_PACKS, PROFILE_DIR_USER and the KNOWNFOLDER_* and
# KNOWNFOLDERGUID_* values.
#
# See the "Configuration" chapter of the documentation for more information.


[env]
# For convenience, Keypirinha populates this [env] section in every loaded
# configuration file so you can easily access to environment variables like
# PATH for example from this file using syntax: ${env:PATH}
#
# If an environment variable happens to be changed while Keypirinha is running
# and this modification impacts current configuration, application and packages
# configuration will be reloaded if needed only.
#
# See the "Configuration" chapter of the documentation for more information.
